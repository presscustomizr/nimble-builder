//global sektionsLocalizedData
( function ( api, $, _ ) {
      // all available input type as a map
      api.czrInputMap = api.czrInputMap || {};

      // input_type => callback fn to fire in the Input constructor on initialize
      // the callback can receive specific params define in each module constructor
      // For example, a content picker can be given params to display only taxonomies
      // the default input_event_map can also be overriden in this callback
      $.extend( api.czrInputMap, {
            detached_tinymce_editor : function() {
                  var input = this,
                      $textarea = $('textarea#czr-customize-content_editor'),
                      _id = $textarea.length > 0 ? $textarea.attr('id') : null;

                  // if ( _.isNull( _id ) ) {
                  //       throw new Error( 'setupDetachedTinyMceEditor => missing textarea for module :' + input.module.id );
                  // }
                  // See wp.editor.initialize() in wp-admin/js/editor.js for initialization options.
                   // **
                   // * Initialize TinyMCE and/or Quicktags. For use with wp_enqueue_editor() (PHP).
                   // *
                   // * Intended for use with an existing textarea that will become the Text editor tab.
                   // * The editor width will be the width of the textarea container, height will be adjustable.
                   // *
                   // * Settings for both TinyMCE and Quicktags can be passed on initialization, and are "filtered"
                   // * with custom jQuery events on the document element, wp-before-tinymce-init and wp-before-quicktags-init.
                   // *
                   // * @since 4.8.0
                   // *
                   // * @param {string} id The HTML id of the textarea that is used for the editor.
                   // *                    Has to be jQuery compliant. No brackets, special chars, etc.
                   // * @param {object} settings Example:
                   // * settings = {
                   // *    // See https://www.tinymce.com/docs/configure/integration-and-setup/.
                   // *    // Alternatively set to `true` to use the defaults.
                   // *    tinymce: {
                   // *        setup: function( editor ) {
                   // *            console.log( 'Editor initialized', editor );
                   // *        }
                   // *    }
                   // *
                   // *    // Alternatively set to `true` to use the defaults.
                   // *    quicktags: {
                   // *        buttons: 'strong,em,link'
                   // *    }
                   // * }
                   // */

                  // Remove now
                  // the initial instance has been created with php inlinse js generated by sek_setup_nimble_editor()
                  if ( window.tinymce ) {
                    mceInstance = window.tinymce.get( _id );

                    if ( mceInstance ) {
                      // if ( ! mceInstance.isHidden() ) {
                      //   mceInstance.save();
                      // }

                      mceInstance.remove();
                    }
                  }
                  // if ( window.quicktags ) {
                  //   qtInstance = window.QTags.getInstance( id );

                  //   if ( qtInstance ) {
                  //     qtInstance.remove();
                  //   }
                  // }

                  // Instantiate a new one
                  // see in wp-admin/js/editor.js
                  window.tinymce.init( tinyMCEPreInit.mceInit[ _id ] );
                  window.QTags.getInstance( _id );
                  // wp.editor.initialize( _id, {
                  //       //tinymce : true,
                  //       tinymce: tinyMCEPreInit.mceInit[_id],
                  //       quicktags : tinyMCEPreInit.qtInit[_id],
                  //       mediaButtons: true
                  // });

                  var _editor = tinyMCE.get( _id );
                  console.log('setupDetachedTinyMceEditor => EDITOR ??', _editor );
                  if ( ! _editor ) {
                        throw new Error( 'setupDetachedTinyMceEditor => missing editor instance for module :' + input.module.id );
                  }

                  // Let's set the input() value when the editor is ready
                  // Because when we instantiate it, the textarea might not reflect the input value because too early
                  if ( _editor.initialized ) {
                        _editor.setContent(input() );
                        api.sekEditorExpanded( true );
                  } else {
                        _editor.on( 'init',function() {
                            _editor.setContent(input() );
                            api.sekEditorExpanded( true );
                        } );
                  }

                  // bind events
                  _editor.on( 'input change keyup', function( evt ) {
                        //$textarea.trigger( 'change' );
                        //console.log('EDITOR CHANGED ?', $textarea.val() );
                        input( _editor.getContent() );
                  } );
                  // TEXT EDITOR
                  $textarea.on( 'input', function( evt ) {
                        //console.log('self.$editorTextArea EVENT ', evt.type, self.$editorTextArea.val() );
                        input( $(this).val() );
                  });
            },//setupDetachedTinyMceEditor
      });//$.extend( api.czrInputMap, {})
})( wp.customize, jQuery, _ );